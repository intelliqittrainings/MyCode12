

Kubernetes doesnot directly deploy containers on workers.
They are encapsulated into a kubernetes object called pod 

A pod is a single isntance of an application
A pod is the smallest object that we can create in kubernetes
We create new pod of the same instance for lb
We can create additional pods on a new node in the cluster
Generally pods have 1:1 relationship with the contianers in it.Though we can have multiple contianers in a single pod we have generally have differnet types of continers in a single pod.

In some cases we have an application and this application depends on a "helper" application which might be used by the main contianer for processing data etc.In such a case we have both the app contiane rand helper contianer in apod


To scale up we create new pods to scale down we can delete exisiting pods


To add autocomplete of kubernetes commands
echo "source <(kubectl completion bash)" >> ~/.bashrc

kubectl version


kubectl 
===========
1 To see the list of nodes
  kubectl get nodes

2 To get detailed info about a node
   kubectl describe nodes node_name



========================================================================
start nginx
1 To start nginx
 kubectl run --image=nginx nginx-app --port=80 

It creates a pod initially and deploys
the nginx container in it.

2 To see all the pods
kubectl get pods

3 To get info about pods
  kubectl describe pods

4 To delete pods
   Take pod name from kubectl get pods
   kubectl delete pods pod_name


======================================================
To start mysql in kubernetes cluster

1 kubectl run --image=mysql:5 mydb --env MYSQL_ROOT_PASSWORD=intelliq

2 To delete completely
  kubectl delete deployment mydb

================================================================

To delete all pods
kubectl delete --all pods

To delete all types of kubernetes object
kubectl delete --all pods,rs,deployments

================================================================


pod-definition.yml
=========================

It contains 4 top level fields which are mandatory

apiVersion: 
kind:
metadata:
spec:

apiVersion:  This is the version of kubernetes api version that we are using to create the objects

kind :This represents the type of object that we want to create

metadata: is data about the objects like names,labels etc
labels can have any key value pairs.labels are given only for grouping pods based on a specific constraint

spec: contains info about the images and contianers

Kind    -    Version
======================
POD           v1
Service       v1
ReplicaSet    apps/v1
Deployment    apps/v1


vim pod-definition.yml
apiVersion: v1
kind: Pod
metadata:
 name: myapp-pod     (This is some name for pod)
 labels:
  author: intelliqit
  app: myapp
  type: fron-end
spec:
 containers:
  - name: nginx-container  (name of container within the pod)
    iamge: nginx   (docker image to be used)

To create a pod
kubectl create -f pod-definiton.yml

To see the list of pods
kubectl get pods

To see detailed info about the pods
kubectl describe pod myapp-pod

To delete
kubectl delete -f pod-definition.yml

=========================================================================
Create kubernetes pod definition file using the below values
Name: postgres
Labels: tier =>db-tier
Container name: postgres
Image: postgres

---
apiVersion: v1
kind: Pod
metadata:
  name: postgres
  labels:
    tier: db-tier
spec:
  containers:
    - name: postgres
      image: postgres
...

To run the above file
kubectl create -f pod-definition.yml

To see the list of pods
kubectl get pods -o wide

To delete
kubectl delete -f pod-definition.yml
=============================================================================
Create mysql pod using pod definition yml'

vim pod-definition.yml
apiVersion: v1
kind: Pod
metadata:
  name: mysql
  labels:
    dbname: mydb
spec:
  containers:
    - name: mydb
      image: mysql:5
      env:
       - name: MYSQL_ROOT_PASSWORD 
         value: intelliq
...

To run the above file
kubectl create -f pod-definition.yml

To see the list of pods
kubectl get pods -o wide

To delete
kubectl delete -f pod-definition.yml

=============================================================
vim pod-definition.yml
---
apiVersion: v1
kind: Pod

metadata:
 name: app-jenkins
 labels:
  ci: cd

spec:
 containers:
  - name: myjenkins
    image: jenkins
    ports:
     - containerPort: 8080
       hostPort: 5050
...

To run the above file
kubectl create -f pod-definition.yml

To delete
kubectl delete -f pod-definition.yml

===========================================================
===========================================================

A ReplicaSet is defined with fields, including a selector that specifies how to identify Pods it can acquire, a number of replicas indicating how many Pods it should be maintaining, and a pod template specifying the data of new Pods it should create to meet the number of replicas criteria. A ReplicaSet then fulfills its purpose by creating and deleting Pods as needed to reach the desired number. When a ReplicaSet needs to create new Pods, it uses its Pod template.
The link a ReplicaSet has to its Pods is via the Pods’ metadata.ownerReferences field, which specifies what resource the current object is owned by. All Pods acquired by a ReplicaSet have their owning ReplicaSet’s identifying information within their ownerReferences field. It’s through this link that the ReplicaSet knows of the state of the Pods it is maintaining and plans accordingly.
A ReplicaSet identifies new Pods to acquire by using its selector. If there is a Pod that has no OwnerReference or the OwnerReference is not a controller and it matches a ReplicaSet’s selector, it will be immediately acquired by said ReplicaSet.

When to use a ReplicaSet
---------------------------------

A ReplicaSet ensures that a specified number of pod replicas are running at any given time. However, a Deployment is a higher-level concept that manages ReplicaSets and provides declarative updates to Pods along with a lot of other useful features. Therefore, we recommend using Deployments instead of directly using ReplicaSets, unless you require custom update orchestration or don’t require updates at all.
This actually means that you may never need to manipulate ReplicaSet objects: use a Deployment instead, and define your application in the spec sectio


vim rc-definition.yml
apiVersion: apps/v1kind: ReplicaSetmetadata:
  name: frontend
  labels:
    app: guestbook
    tier: frontendspec:
  # modify replicas according to your case
  replicas: 3
  selector:
    matchLabels:
      tier: frontend
  template:
    metadata:
      labels:
        tier: frontend
    spec:
      containers:
      - name: webserver
        image: httpd
To create the replicas with the above file
kebectl create -f replicaset-definition.yml

To get the list of replicsets
kubectl get replicaset

For detailed info about replicaset
kubectl describe replicaset

To get the list of pods
kubectl get pods

To delete a single pod
kubectl delete pod  <podname from keubectl get pods>


To see all created objects
kubectl get all
========================================================================
Scalling
----------
Make changes to replicas to 6
execute the below command
kubectl replace -f replicaset-definition.yml

To directly effect from command without updating the file
kubectl scale --replicas=6 -f replicasset-definition.yml
====================================================================
Deployment


controllers/nginx-deployment.yaml 

kubectl --record deployment.apps/nginx-deployment set image deployment.v1.apps/nginx-deployment nginx=nginx:1.9.1
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.7.9
        ports:
        - containerPort: 80

====================================================================
kubectl scale --current-replicas=2 --replicas=3 deployment/mysql

A Deployment controller provides declarative updates for Pods and ReplicaSets.
You describe a desired state in a Deployment object, and the Deployment controller changes the actual state to the desired state at a controlled rate. You can define Deployments to create new ReplicaSets, or to remove existing Deployments and adopt all their resources with new Deployments.

A Deployment named nginx-deployment is created, indicated by the .metadata.name field.
The Deployment creates three replicated Pods, indicated by the replicas field.
The selector field defines how the Deployment finds which Pods to manage. In this case, you simply select a label that is defined in the Pod template (app: nginx). However, more sophisticated selection rules are possible, as long as the Pod template itself satisfies the rule.



Update the nginx
----------------------
kubectl --record deployment.apps/nginx-deployment set image deployment.v1.apps/nginx-deployment nginx=nginx:1.9.1

check the update
-----------------------
kubectl describe deployments

===================================================================================
DockerCompose on kubernetes

---
version: '3'
services:
 web:
  image: nginx
  ports:
   - 7878:80

 db:
  image: postgres
  environment:
   POSTGRES_PASSWORD: intelliq

...

====================================================


---
version: '3'

services:
 mydb:
  image: mysql:5
  environment:
   MYSQL_ROOT_PASSWORD: intelliq

 mywordpress:
  image: wordpress
  ports:
   - 8877:80
  deploy:
   replicas: 3
...


==========================================================


---
version: '3'
services:
 devserver:
  image: jenkins
  ports:
   - 5050:8080
  deploy:
   replicas: 1
   resources:
    limits:
     cpus: "0.1"
     memory: 150M
 qaserver:
  image: tomcat
  ports:
   - 6060:8080
  deploy:
   replicas: 2
   resources:
    limits:
     memory: 100M

==========================================================


---
version: '3'
services:
 db:
  image: mysql
  environment:
   MYSQL_ROOT_PASSWORD: intelliq

 apache:
  image: httpd
  ports:
   - 9898:80
  deploy:
   replicas: 3
   resources:
    limits:
     cpus: "0.1"
     memory: 100M
   placement:
    constraints:
     - node.hostname == Worker2

 php:
  image: php:7.2-apache
  deploy:
   replicas: 2


=============================================================
---
version: '3'
services:
 hub:
  image: selenium/hub
  ports:
   - "4444:4444"
  deploy:
   replicas: 4
   update_config:
    parallelism: 2
 firefox:
  image: selenium/node-firefox-debug
  ports:
   - "5901:5900"
  deploy:
   replicas: 4
   update_config:
    parallelism: 2
  depends_on:
   - hub

 chrome:
  image: selenium/node-chrome-debug
  ports:
   - "5902:5900"
  deploy:
   replicas: 4
   update_config:
     parallelism: 2
  depends_on:
   - hub
================================================================



Kubernetes Services
-----------------------
This is useful if the kubernetes objects want to communicate with other applications or users

apiVersion: v1
kind: Service
metadata:
 name: myapp-service
spec:
 type: NodePort
 ports:
  - targetPort: 80
    port: 80
    nodePort: 30008
  selector:
   author: intelliq

To open a port on google cloud

gcloud compute firewall-rules create newrule1 --allow tcp:30008

============================================================



nodeport range is 30000-32767
target port is port on the pod
port is port opened on service
nodeport is the port of the node in cluster for outside communication



====================================================================
Demo application
====================================================================
vim voting-app-pod.yml

apiVersion: v1
kind: Pod
metadata:
 name: voting-app-pod
 labels:
  name: voting-app-pod
  app: demo-voting-app
spec:
 containers:
  - name: voting-app
    image: dockersamples/examplevotingapp_vote
    ports: 
     - containerPort: 80

-----------------------------------------------------
vim worker-app-pod.yml

apiVersion: v1
kind: Pod
metadata:
 name: worker-app-pod
 labels:
  name: worker-app-pod
  app: demo-voting-app
spec:
 containers:
  - name: worker-app
    image: dockersamples/examplevotingapp_worker
    
----------------------------------------------------
vim result-app-pod.yml

apiVersion: v1
kind: Pod
metadata:
 name: result-app-pod
 labels:
  name: result-app-pod
  app: demo-voting-app
spec:
 containers:
  - name: result-app
    image: dockersamples/examplevotingapp_resulter
    ports:
     - containerPort: 80

------------------------------------------------------
vim redis-pod.yml

apiVersion: v1
kind: Pod
metadata:
 name: redis-pod
 labels:
  name: redis-pod
  app: demo-voting-app
spec:
 containers:
  - name: redis
    image: redis
    ports:
     - containerPort: 6379
--------------------------------------------------------
vim postgres-pod.yml

apiVersion: v1
kind: Pod
metadata:
 name: postgres-pod
 labels:
  name: postgres-pod
  app: demo-voting-app
spec:
 containers:
  - name: postgres
    image: postgres:9.4
    ports:
     - containerPort: 5432

-------------------------------------------

vim  redis-service.yml
apiVersion: v1
kind: Service
metadata: 
 name: redis
 labels:
  name: redis-service
  app: demo-voting-app
spec:
 ports:
  - port: 6379
    targetPort: 6379
 selector:
  name: redis-pod
  app: demo-voting-app
(labels of redis)
------------------------------------------


vim  postgres-service.yml
apiVersion: v1
kind: Service
metadata: 
 name: db
 labels:
  name: db-service
  app: demo-voting-app
spec:
 ports:
  - port: 5432
    targetPort: 5432
 selector:
  name: postgres-pod
  app: demo-voting-app
(labels of post gres)
-------------------------------------------(If type is not specified here it will be created as cluster ip whcih will be avaibale only in the cluster.So give type as Load balanncer her so it can be available externally)

vim  voting-app-service.yml
apiVersion: v1
kind: Service
metadata: 
 name: voting-service
 labels:
  name: voting-service
  app: demo-voting-app
spec:
 type: LoadBalancer  
 ports:
  - port: 80
    targetPort: 80
 selector:
  name: voting-app-pod
  app: demo-voting-app
(labels of voting app pod)
---------------------------------

vim  result-app-service.yml
apiVersion: v1
kind: Service
metadata: 
 name: result-service
 labels:
  name: result-service
  app: demo-voting-app
spec:
 type: LoadBalancer  
 ports:
  - port: 80
    targetPort: 80
 selector:
  name: result-app-pod
  app: demo-voting-app
(labels of result app pod)
-----------------------------------



votingpo
voting service

redis-pod
redis-service

postgre-pod
postgres-service

worker-pod

result-app-pod
result-app-service


============================================

Kubernetes Namespaces can be used to divide a cluster into logical partitions allowing a single large Kubernetes cluster to be used by multiple users and teams, or a single user with multiple applications. Each user, team, or application running in a Namespace, is isolated from every other user, team, or application in other Namespaces and they operate as if they are the sole user of the cluster (note that Namespaces do not provide network segmentation).


apiVersion: v1
  kind: Namespace
  metadata:
    name: test-ns


kubectl apply -f namespace.yaml

apiVersion: v1
kind: Pod
metadata:
  name: mypod
  namespace: my-namespace
  labels:
     app: mypod
spec:
  containers:
  - name: mypod
    image: nginx:alpine
 
========================================================
kubectl create namespace demo


vim qouta.yml

apiVersion: v1
kind: ResourceQuota
metadata:
  name: mem-cpu
  namespace: demo
spec:
  hard:
    requests.cpu: "0.5"
    requests.memory: 512Mi
    limits.cpu: "1"
    limits.memory: 1Gi


kubectl apply -f qouta.yaml
resourcequota/mem-cpu created

=============================================================


apiVersion: v1
kind: Pod
metadata:
  namespace: demo
  name: pod-demo1
  labels:
     app: demo1
spec:
  containers:
  - name: demo1
    image: nginx:alpine
    ports:
    - containerPort: 80
    resources:
      limits:
        memory: "400Mi"
        cpu: "0.3"      
      requests:
        memory: "300Mi"
        cpu: "0.2"

========================================================================
apiVersion: v1
kind: Pod
metadata:
  namespace: demo
  name: pod-demo1
  labels:
     app: demo1
spec:
  containers:
  - name: demo1
    image: nginx:alpine
    ports:
    - containerPort: 80
    resources:
      limits:
        memory: "400Mi"
        cpu: "0.3"      
      requests:
        memory: "300Mi"
        cpu: "0.2"
 



























=============================================================================
gcloud container clusters resize  standard-cluster-2  --size=0 --zone=us-central1-a






















































 
